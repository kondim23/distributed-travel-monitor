Προγραμματισμός Συστήματος
Εργασία 1
Δημητρακόπουλος Κωνσταντίνος
ΑΜ: 1115201500034

Η εργασία μεταγλωτίζεται με την εντολή make ενώ εκτελείται με την εντολή ./vaccineMonitor -c inputFile -b bloomsize
Μία ενδεικτική εκτέλεση είναι η εξής: ./vaccineMonitor -c inputFile -b 100000

H δομή skipList έχει υλοποιηθεί ως γενικευμένη - generic, αφού οι skipLists vaccinated_persons και not_vaccinated_persons
κρατούν διαφορετικού τύπου δεδομένα. Η vaccinated_persons φιλοξενεί στοιχεία τύπου vaccData (περιέχει δείκτη σε record και
ημερομηνία εμβολιασμού), ενώ η not_vaccinated_persons φιλοξενεί δείκτες σε records. Με αυτό τον τρόπο δεσμεύεται ακριβώς 
όση μνήμη χρειάζεται.

Τα records, countries και virus δεδομένα κρατούνται σε τρεις δομές τύπου generic Hash table.

Κατα τις εντολές populationStatus και popStatusByAge δημιουργείται ένα προσωρινό hash table που ονομάζεται
tempStatisticsHash στα πλαίσια των συναρτήσεων. Το συγκεκριμένο hash δεσμεύεται με την έναρξη της εντολής και αποδεσμεύεται με τη λήξη της.
Εκεί συγκεντρώνονται όλα τα απαραίτητα δεδομένα προς εκτύπωση ώστε να μην χρειαστεί να επισκευτεί πολλές φορές μία συγκεκριμένη skipList.
Αρχικά δεσμευεται το hash, συλλέγεται η απαραίτητη πληροφρία προς εκτύπωση, εμφανίζεται και τελικά το hash αποδεσμεύεται.

Δεν εκτυπώνεται προτροπή προς τον χρήστη για εισαγωγή εντολής, ώστε να μην αλλοιωθεί το ζητούμενο output format, αλλά υπάρχει
η επιλογή ενεργοποίησης της, αλλάζοντας την τιμή της defined μεταβλητής PROMPT σε 1 στο αρχείο vaccineMonitor.c (προτροπή = $).

Κατα την ανάγνωση του αρχείου εισόδου εγγραφών citizenFile, για οποιαδήποτε εγγραφή δεν καταχωρείται στο σύστημα (inconsistency, λάθος tokens,
δεύτερη εγγραφή για το ίδιο άτομο) εκτυπώνεται μήνυμα ERROR IN RECORD theRecord όπου theRecord είναι η προβληματική εγγραφή.

--------------------------------------------------------------------

Δομή genericHashTable:

Η δομή genericHashTable αποτελείται από numbuckets κατα το πληθος δείκτες σε hashnodes, ενώ υπαρχει η δυνατότητα δημιουργίας
κόμβων υπερχείλησης. Οι κόμβοι hashnode της δομής αποτελούνται απο ένα δείκτη σε δεδομένα και ένα δείκτη στον επόμενο
κόμβο (λίστα υπερχείλησης).
hash_Initialize(): Αρχικοποίηση και επιστροφή του hash table.
hash_searchValue() : Αναζήτηση των δοθέντων δεδομένων void* data στο δοθέν hash σύμφωνα με την δοθούσα συνάρτηση compare.
Σε περίπτωση που βρεθεί hashnode που κρίνεται θετικό απο τη compare επιστρέφεται δείκτης σε αυτό. Σε διαφορετική περίπτωση,
αν το όρισμα size είναι μεγαλύτερο του 0 δεσμεύεται ο κατάλληλος χώρος και γίνεται εισαγωγή του στοιχείου στην κατάλληλη θέση
και επιστρέφεται δείκτης στο νέο στοιχείο, ενώ αν το size είναι ίσο με 0 επιστρέφεται null.
hash_destroy() : Συνολική αποδέσμευση του hash.
hash_applyToAllNodes() : Εκτελείται η συνάρτηση functionToExecute σε όλους τους κόμβους του hash. 

----------------------------------------------------------------------

Δομή Record:

Αποτελείται απο τα citizenID, firstName, lastName, age και δεικτη σε δομή τύπου country.
Περιέχει τρεις συναρτήσεις σύγκρισης δομών τύπου Record record_compareType?() που χρησιμοποιούνται εντός των 
γενικευμένων δομών skipList.
Περιέχει τη συνάρτηση record_fullCompare() όπου συγκρίνει όλα τα πεδία από δύο records και επιστρέφει 0 σε περίπτωση ομοιότητας,
1 σε περίπτωση διαφοράς.
record_countryCount(): Χρησιμοποιείται κατα την traverse της generic skipList not_vaccinated_persons, στην περίπτωση κλήσης της εντολής
populationStatus και είτε αρχικοποιεί-εισάγει στο προσωρινό hash table tempStatisticsHash μία δομή τύπου vaccStats όπου
κρατεί τα στατιστικά προς εκτύπωση, είτε ενημερώνει την ήδη υπάρχουσα.
record_countryCountByAge(): Παρόμοια χρήση με την record_countryCount, όμως για την εντολή popStatusByAge
record_print() : Εκτυπώνει το δοθεν record. Χρησιμοποιείται εντός της generic skipList not_vaccinated_persons.
Τελικά περιέχονται λοιπές βασικές συναρτήσεις δομών δεδομένων τύπου get - set element.

-------------------------------------------------------------------------

Δομή Country:

Αποτελείται απο ένα όνομα που αντιπροσωπεύει μοναδικά μια χώρα.
country_getName(): Επιστρέφει δείκτη στο όνομα της χώρας.
country_compare(): Συγκρίνει δύο χώρες σύμφωνα με τα ονόματά τους.

--------------------------------------------------------------------------

Δομή Virus:

Αποτελείται απο το όνομα του ιού, το bloomFilter εμβολιασμού, τη skipList vaccinated_persons που υποδεικνύει τα εμβολιασμένα μέλη 
και τη skipList not_vaccinated_persons που υποδυκνύει τα μη εμβολιασμένα μέλη.
virus_compare(): Συγκρίνει τους δοθέντες ιούς βάσει του ονόματος τους.
virus_searchRecordInVaccinatedType1(): Χρησιμοποιείται κατα την εντολή vaccineStatus όπου παρέχεται ιός απο το χρήστη σαν όρισμα.
Πραγματοποιείται αναζήτηση στη skipList vaccinated_persons του συγκεκριμένου ιού, βάσει της δομής vaccData (που περιέχει δείκτη
στο επιθυμητό record και μια κενη ημερομηνία εμβολιασμού) και της συνάρτησης compare. Σε περίπτωση που βρεθεί, η δομή vaccData
περιέχει την επιθυμητή ημερομηνία. Τελικά εκτυπώνται κατάλληλα μήνυμα στο χρήστη.
virus_searchRecordInVaccinatedType2(): Χρησιμοποιείται κατα την εντολή vaccineStatus όπου δεν παρέχεται ιός απο το χρήστη σαν όρισμα.
Η συνάρτηση εκτελείται σε συνεργασία με την skipList_applyToAllNodes() ώστε να αναζητηθεί η κατάσταση του δοθέντος citizenID για κάθε ιό.
Τελικά, ακολουθείται παρόμοια διαδικασία με την virus_searchRecordInVaccinatedType1().
virus_initialize(): Αρχικοποίηση του δοθέντος virus σύμφωνα με το δοθέν όνομα.
virus_destroy(): Αποδέσμευση των τριών δομών που κρατεί το virus.

----------------------------------------------------------------------------

Δομή bloomFilter:

Αποτελείται απο ένα δείκτη σε δυναμικά δεσμευμένο χώρο απο χαρακτήρες, με αποτέλεσμα την διαχείρηση των byte τους.
bloomFilter_create(): Δεσμεύονται και αρχικοποιούνται size χαρακτήρες και επιστρέφεται δείκτης σε αυτούς.
bloomFilter_insert(): Υπολογίζεται η τιμή των τριών συναρτήσεων κατακερματισμού μέσω του πίνακα με δείκτες συναρτήσεων hashFunction
και για κάθε τιμή καλείται η συνάρτηση bloomFilter_bitShift().
bloomFilter_bitShift(): Υπολογίζεται ο σωστός χαρακτήρας απο τους δεσμευμένους και το σωστό bit αυτού του χαρακτήρα, η δυαδική τιμή 10000000
δέχεται δεξιά ολίσθηση κατάλληλα σύμφωνα με τους προηγούμενους υπολογισμούς και τελικά εκτελείται λογική διάζευξη του χαρακτήρα του bloomfilter 
και του σωστα ολισθιμένου αυτού.
bloomFilter_search(): Υπολογίζεται η τιμή των τριών συναρτήσεων κατακερματισμού μέσω του πίνακα με δείκτες συναρτήσεων hashFunction
και για κάθε τιμή καλείται η συνάρτηση bloomFilter_bitConfirm(). Τελικά εκτυπώνονται κατάλληλα μηνύματα.
bloomFilter_bitConfirm(): Υπολογίζεται ο σωστός χαρακτήρας απο τους δεσμευμένους και το σωστό bit αυτού του χαρακτήρα, δέχεται 
ολίσθηση κατάλληλα ώστε να αποκτήσουμε το bit που μας ενδιαφέρει και τελικά ελέγχεται η τιμή του (0 ή 1).
bloomFilter_delete(): Αποδέσμευση του χώρου που καταλαμβάνει το bloomFilter.
Τελικά δίνονται οι συναρτήσεις κατακερματισμού που μας δόθηκαν για την υλοποίηση.

--------------------------------------------------------------------------------

Δομή skipList:

Η υλοποίηση της skipList ειναι τύπου γενικευμένη-generic,όπως αναφέρθηκε στην αρχή.
Η δομή skipList αποτελείται απο τη δομή skipListHead που κρατά δείκτη στο πρώτο επίπεδο της skipList και μεταδεδομένα για αυτή όπως τον αριθμό των
υπάρχοντων στοιχείων και τον αριθμό των στρωμάτων-layers. Κάθε επίπεδο αποτελείται απο δομές τύπου skipListNode οι οποίες περιέχουν δείκτη στο κόμβο
χαμηλότερου επιπέδου, δείκτη στον επόμενο κόμβο του ίδιου επιπέδου και ένα δείκτη σε δεδομένα. Όλοι οι κόμβοι που αντιπροσωπεύουν την ίδια τιμή (πχ 
κόμβοι για συγκεκριμένο citizenID σε διαφορετικά επίπεδα) δείχνουν στην ίδια θέση μνήμης για τα δεδομένα,  ώστε να μην υπάρχουν διπλότυπα. Οι πρώτοι
κόμβοι κάθε επιπέδου είναι κενοί και αντιπροσωπεύουν την αρχή του επιπέδου, δείχνωντας σε κόμβους με δεδομένα. Η υλοποίηση είναι τελείως δυναμική,
αφού υπάρχει ένα maxheight επιπέδων που υπολογίζεται σύμφωνα με το λογάριθμο του πλήθους των στοιχείων. Τελικά δεν δεσμεύεται μνήμη που δεν χρειάζεται.
skipList_initializeSkipList(): Αρχικοποίηση της δομής κεφαλής skipListHead και των δεικτών της.
skipList_insertValue(): Δίνεται η skipList για εισαγωγή, τα δεδομένα, το μέγεθος τους και μία συνάρτηση σύγκρισης τους. Αν το στοιχέιο αποτελεί
το πρώτο της skipList τοτε δημιουργείται το πρώτο κενό στοιχείο το οποίο συνδέεται με το στοιχείο προς εισαγωγή. Σε διαφορετική περίπτωση γίνεται
εισαγωγή στο επίπεδο μέσω της skipList_insertInLayer(), ελέγχεται αν υπάρχει διαθεσιμότητα για νέο επίπεδο μέσω της skipList_newLayerAvailability()
και αν ναι δημιουργείται τέτοιο μέσω της skipList_addLayer(). Υπάρχει έλεγχος για διπλότυπο στοιχείο στη skipList.
skipList_insertInLayer(): Αναδρομική συνάρτηση που αρχικά μεταβαίνει στη κατάλληλη θέση στο τρέχων επίπεδο, ελέγχει για προυπάρχουσα όμοια εγγραφή.
Στην περίπτωση που είναι στο τελευταίο επίπεδο τότε εισάγει το κόμβο στη συνδεδεμένη λίστα, ενώ διαφορετικά καλεί τον εαυτό της για το χαμηλότερο
επίπεδο. Επιστρέφοντας απο τις αναδρομικές κλήσεις σύμφωνα με την ορισμένη global πιθανότητα εισάγει τον κόμβο στο ανώτερα επίπεδα.
skipList_newLayerAvailability(): Ελέγχει τη διαθεσιμότητα νέου επιπέδου σύμφωνα με το λογάριθμο του πλήθους των στοιχείων και το πλήθος των επιπέδων.
skipList_addLayer(): Δημιουργεί νέο επίπεδο στη skipList κάνοντας εισαγωγή του πρώτου κενού κόμβου και εισαγωγή σύμφωνα με μια πιθανότητα των υπολοίπων
κόμβων.
skipList_searchValue(): Πραγματοποιεί αναζήτηση μίας τιμής κάνοντας περιήγηση στα επίπεδα. Σε περίπτωση που βρει αναφορά στην τιμή επιστρέφει 0,
αλλιώς 1.
skipList_removeValue(): Πραγματοποιεί αναζήτηση της τιμής στη skipList. Σε περίπτωση που βρεθεί καλείται η skipList_removeValueFromLayer().
Αν το πάνω επίπεδο αδειάσει αποδεσμεύεται.
skipList_removeValueFromLayer(): Αναδρομική συνάρτηση που δέχεται τον κόμβο προς διαγραφή και τον προηγούμενο. Αποδεσμεύει τους κόμβους απο 
αυτόν στο ψαμηλότερο επίπεδο έως αυτόν στο υψηλότερο.
skipList_applyToAll(): Μεταβαίνει στο χαμηλότερο επίπεδο και εκτελεί τη συνάρτηση funcToApply σε όλους τους κόμβους του.
skipList_destroy(): Αποδεσμεύει ολόκληρη τη δομή.

----------------------------------------------------------------------------------

Δομή vaccinationData:

Η συγκεκριμένη δομή χρησιμοποιείται στη skipList vaccinated_persons όπου τα δεδομένα όπου δείχνει είναι τύπου vaccData. Συγκεκριμένα, περιέχουν
ένα δείκτη στο record που έγινε vaccinate και την ημερομηνία που έγινε vaccinate.
vaccData_popPercentage(): Χρησιμοποιείται κατα την εντολή populationStatus όπου εισάγει στο hash tempStatisticsHash την πληροφορία προς εκτυπωση
για τους εμβολιασμένους ανθρώπους. Συγκεκριμένα, αν η χώρα του record είναι η επιθυμητή, τοτε είτε εισάγεται είτε επιστρέφεται απο το
tempStatisticsHash η δομή vaccStats που την αντιπροσωπεύει και ενημερώνεται, αν τηρούνται οι προυποθέσεις των ημερομηνιών.
vaccData_popPercentageByAge(): Ακολουθείται η ίδια διαδικασία με την vaccData_popPercentage(), αλλα κατα την εντολή popStatusByAge και η πληροφορία
είναι ομαδοποιημένη κατάλληλα ανα κατηγορία ηλικίας.
vaccData_compare(): Σύγκριση δύο δομών τύπου vaccStats σύμφωνα με το citizenID του record που δείχνουν.

--------------------------------------------------------------------------------------

Δομή vaccineStats:

Η συγκεκριμένη δομή χρησιμοποιείται σε ένα προσωρινό generic hash που δημιουργείται και αποδεσμεύεται στα πλαίσια εκτέλεσης των εντολών 
populationStatus και popStatuysByAge. Κατα την populationStatus δημιουργείται ένα hash που περιέχει δεδομένα τύπου vaccStats τα οποία εισάγωνται
σε αυτό και ενημερώνονται απο τις συναρτήσεις vaccData_popPercentage() και record_countryCount() με αποτέλεσμα να περιέχεται στη μεταβλητή
countVaccPeople ο αριθμός εμβολιασμένων απο τον ιό που δόθηκε και στη μεταβλητή countPeople ο αριθμός των ανθρώπων που υπολογίστηκε για αυτη τη χώρα
Αντίστοιχα στα πλαίσια της εντολής popStatuysByAge υπολογίζονται αυτές οι τιμές ανα κατηγορία ηλικίας αποθηκεύοντας την τιμή στην κατάλληλη θέση πίνακα.
countVaccPeople[i] και countPeople[i].
compare_vaccStats(): Σύγκριση vaccStats βάσει του ονόματος χώρας.
vaccStat_computePercentage(): υπολογισμός και εκτύπωση του αποτελέσματος για την populationStatus.
compare_vaccStatsByAge(): Σύγκριση vaccStats βάσει του ονόματος χώρας.
vaccStat_computePercentageByAge(): υπολογισμός και εκτύπωση του αποτελέσματος για την popStatusByAge.

---------------------------------------------------------------------------------------------

vaccineMonitor:

Χρησιμοποιούνται οι συναρτήσεις:
wrongFormat_record() - wrongFormat_command(): Εκτυπώνεται κατάλληλο μήνυμα λάθους και διαβάζεται νέα εντολή
argumentsCheck_letters() - argumentsCheck_lettersNumbersDash(): έλεγχος για κατάλληλους χαρακτήρες στα ορίσματα
capitalize(): Μετατροπή των πεζών χαρακτήρων σε κεφαλαίους.
getRecordArguments(): Γίνεται συλλογή των πεδίων ενός record σύμφωνα με το καθορισμένο format της εκφώνησης. Σε περίπτωση που οποιοδήποτε όρισμα
δεν είναι σωστό ή ο αριθμος των ορισμάτων δεν είναι σωστός εκτπώνεται κατάλληλο μήνυμα και η εγγραφή απορρίπτεται.
getStatsArguments(): Γίνεται συλλογή των πεδίων ενός command popStatusByAge ή populationStatus σύμφωνα με το καθορισμένο format της
εκφώνησης. Σε περίπτωση που οποιοδήποτε όρισμα δεν είναι σωστό ή ο αριθμος των ορισμάτων δεν είναι σωστός εκτyπώνεται κατάλληλο μήνυμα
και η εντολή απορρίπτεται.
insertRecordToSystem(): Γίνεται εισαγωγή μια εγγραφής στο σύστημα. Αρχικά ελέγχεται αν υπάρχει ο ιός και η προκαθορισμένη εγγραφή. Σε περίπτωση
που η εγγραφή υπάρχει και δεν είναι όμοια (inconsistent) απορρίπτεται. Αν ο πολίτης έχει εμβολισατεί στον ιό αυτό εμφανίζεται κατάλληλο μήνυμα.
Αν ο πολίτης έχει καταχωρηθεί ως μη εμβολιασμένος, τότε αν η εντολή είναι τύπου vaccinateNow ή insertCitizenRecord διαγράφεται απο τη λίστα 
not_vaccinated_persons,σε διαφορετική περίπτωση εμφανίζεται μήνυμα λάθους. Ελέγχεται αν η χώρα υπάρχει ήδη, αλλιώς γίνεται εισαγωγή. 
Εισάγεται η εγγραφή. Τελικά ενημερώνεται η κατάλληλη skipList και bloomfilter (αν χρειασετεί).
main(): Αρχικά ελέγχονται για ορθότητα τα ορίσματα του χρήστη, αρχικοποιούνται τα κατάλληλα hash (virushash,recordshash,countrieshash),
διαβάζονται εγγραφές απο το αρχείο εισόδου και καλούνται οι getRecordArguments() και insertRecordToSystem().
Κατα την ανάγνωση του αρχείου εισόδου εγγραφών citizenFile, για οποιαδήποτε εγγραφή δεν καταχωρείται στο σύστημα (inconsistency, λάθος tokens,
δεύτερη εγγραφή για το ίδιο άτομο) εκτυπώνεται μήνυμα ERROR IN RECORD theRecord όπου theRecord είναι η προβληματική εγγραφή.
Έπειτα αναμένονται εντολές χρήστη. Κατα τις vaccineStatusBloom, vaccineStatus και list-notVaccinated-Persons ελέγχονται οι κατάλληλες δομές δεδομένων,
με τη βοήθεια συναρτήσεων της δομης που αναφέρεται. Κατα τις insertCitizenRecord και vaccinateNow εισάγεται κατάλληλα νέ εγγραφή στο σύστημα
(με την κατάλληλη διγραφή όπου χρειάζεται). Κατα τις populationStatus και popStatusByAge δημιουργείται ένα προσωρινό hash table που ονομάζεται
tempStatisticsHash στα πλαίσια των συναρτήσεων. Το συγκεκριμένο hash δεσμεύεται με την έναρξη της εντολής και αποδεσμεύεται με τη λήξη της.
Εκεί συγκεντρώνονται όλα τα απαραίτητα δεδομένα προς εκτύπωση ώστε να μην χρειαστεί να επισκευθεί πολλές φορές μία συγκεκριμένη skipList.
Αρχικά δεσμευεται το hash, συλλέγεται η απαραίτητη πληροφoρία προς εκτύπωση, εμφανίζεται και τελικά το hash αποδεσμεύεται.
Τέλος κατα την εντολή exit αποδεσμεύεται όλη η μνήμη που χρησιμοποιείται.

---------------------------------------------------------------------------------------------------

testFile.sh:

Αρχικά ορίζεται η συνάρτηση δημιουργίας τυχαίου θετικού αριθμού. Ο αριθμός αυτός αποτελεί το υπόλοιπο της διαίρεσης με το πρώτο όρισμα της συναρτησης 
και πρόσθεση του δεύτερου ορίσματος της. Στο κυρίως script γίνεται έλεγχος για τον αριθμό των ορισμάτων, ύπαρξη και δικαίωμα ανάγνωσης αρχείων και
το σωστό εύρος τιμών τους. Δημιουργείται / Αδειάζει το αρχείο που ορίζεται απο τη μεταβλητή FILE. Υπολογίζεται το τυχαίο citizenID. Αν duplicatesAllowed
==1 τότε κάθε 5 citizenID επαναλαμβάνεται το τελευταιο. Σε διαφορετική περίπτωση λαμβάνεται μια λίστα απο το αρχείο εξόδου με τα citizenID 
και ελέγχεται αν ο τυχαίος αριθμός ειναι σε αυτή. Επιλέγεται ένας τυχαίος χαρακτήρας απο τη συμβολοσειρά allLetters με τη βοηθεια του random, απο 3
έως 12 φορές μέχρι να σηματιστεί όνομα. Ακολουθεί η ίδια διαδικασία για το επώνυμο. Επιλέγεται ένα τυχαίο όνομα χωρας απο το κατάλληλο αρχείο 
με τη βοήθεια του random και του wc. Ακολουθεί τυχαία ηλικία [1,120] και virus με την ίδια διαδικασία της country. Τυχαία εκτυπώνεται YES / NO 
με τυχαίο date στο YES.